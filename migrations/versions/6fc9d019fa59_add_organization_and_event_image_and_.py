"""add organization and event image and location

Revision ID: 6fc9d019fa59
Revises: 78695486055f
Create Date: 2024-11-22 21:25:04.424045

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes

# revision identifiers, used by Alembic.
revision: str = '6fc9d019fa59'
down_revision: Union[str, None] = '78695486055f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event_categories',
    sa.Column('category_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('category_name')
    )
    op.create_table('provinces',
    sa.Column('code_province', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name_province', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('code_province')
    )
    op.create_table('cities',
    sa.Column('code_city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name_city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_province', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['code_province'], ['provinces.code_province'], ),
    sa.PrimaryKeyConstraint('code_city')
    )
    op.create_table('districts',
    sa.Column('code_district', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name_district', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['code_city'], ['cities.code_city'], ),
    sa.PrimaryKeyConstraint('code_district')
    )
    op.create_table('villages',
    sa.Column('code_village', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name_village', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_district', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['code_district'], ['districts.code_district'], ),
    sa.PrimaryKeyConstraint('code_village')
    )
    op.create_table('eventorganizers',
    sa.Column('organizer_id', sa.Uuid(), nullable=False),
    sa.Column('company_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('company_address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACTIVE', 'INACTIVE', name='organizerstatus'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('verified_at', sa.DateTime(), nullable=False),
    sa.Column('code_province', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_district', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_village', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['code_city'], ['cities.code_city'], ),
    sa.ForeignKeyConstraint(['code_district'], ['districts.code_district'], ),
    sa.ForeignKeyConstraint(['code_province'], ['provinces.code_province'], ),
    sa.ForeignKeyConstraint(['code_village'], ['villages.code_village'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('organizer_id')
    )
    op.create_table('events',
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACTIVE', 'CANCELLED', 'COMPLETED', name='eventstatus'), nullable=False),
    sa.Column('organizer_id', sa.Uuid(), nullable=False),
    sa.Column('code_province', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_district', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code_village', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['code_city'], ['cities.code_city'], ),
    sa.ForeignKeyConstraint(['code_district'], ['districts.code_district'], ),
    sa.ForeignKeyConstraint(['code_province'], ['provinces.code_province'], ),
    sa.ForeignKeyConstraint(['code_village'], ['villages.code_village'], ),
    sa.ForeignKeyConstraint(['organizer_id'], ['eventorganizers.organizer_id'], ),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_table('event_category_association',
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('category_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['category_name'], ['event_categories.category_name'], ),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ),
    sa.PrimaryKeyConstraint('event_id', 'category_name')
    )
    op.create_table('event_class',
    sa.Column('event_class_id', sa.Uuid(), nullable=False),
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('class_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('base_price', sa.Numeric(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ),
    sa.PrimaryKeyConstraint('event_class_id')
    )
    op.create_table('event_images',
    sa.Column('image_id', sa.Uuid(), nullable=False),
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ),
    sa.PrimaryKeyConstraint('image_id')
    )
    op.create_table('schedules',
    sa.Column('schedule_id', sa.Uuid(), nullable=False),
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('day_of_week', sa.Enum('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', name='dayofweek'), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ),
    sa.PrimaryKeyConstraint('schedule_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('schedules')
    op.drop_table('event_images')
    op.drop_table('event_class')
    op.drop_table('event_category_association')
    op.drop_table('events')
    op.drop_table('eventorganizers')
    op.drop_table('villages')
    op.drop_table('districts')
    op.drop_table('cities')
    op.drop_table('provinces')
    op.drop_table('event_categories')
    
    op.execute("DROP TYPE IF EXISTS eventstatus")
    op.execute("DROP TYPE IF EXISTS organizerstatus")
    op.execute("DROP TYPE IF EXISTS dayofweek")
    
    # ### end Alembic commands ###
