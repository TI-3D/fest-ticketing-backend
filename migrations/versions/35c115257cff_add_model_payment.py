"""add model payment

Revision ID: 35c115257cff
Revises: 4e992fd6cef9
Create Date: 2024-12-17 11:24:47.872084

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = '35c115257cff'
down_revision: Union[str, None] = '4e992fd6cef9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event_classes',
    sa.Column('event_class_id', sa.Uuid(), nullable=False),
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('class_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('base_price', sa.Numeric(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ),
    sa.PrimaryKeyConstraint('event_class_id')
    )
    op.create_table('payments',
    sa.Column('payment_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('total', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('payment_status', sa.Enum('PENDING', 'COMPLETED', 'FAILED', 'CANCELLED', name='paymentstatus'), nullable=False),
    sa.Column('payment_method', sa.Enum('CREDIT_CARD', 'GOPAY', 'DANA', 'OVO', name='paymentmethodtype'), nullable=False),
    sa.Column('barcode', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('event_class_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['event_class_id'], ['event_classes.event_class_id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('payment_id')
    )
    op.drop_table('event_class')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event_class',
    sa.Column('event_class_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('class_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('base_price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.event_id'], name='event_class_event_id_fkey'),
    sa.PrimaryKeyConstraint('event_class_id', name='event_class_pkey')
    )
    op.drop_table('payments')
    op.drop_table('event_classes')
    
    op.execute("DROP TYPE IF EXISTS paymentstatus")
    op.execute("DROP TYPE IF EXISTS paymentmethodtype")
    # ### end Alembic commands ###
