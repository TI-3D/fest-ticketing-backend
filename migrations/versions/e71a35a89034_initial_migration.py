"""Initial migration

Revision ID: e71a35a89034
Revises: 
Create Date: 2024-11-07 15:08:14.503642

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from faker import Faker
from datetime import datetime, timezone
from app.core.security import generate_password_hash
# revision identifiers, used by Alembic.
revision: str = 'e71a35a89034'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

fake = Faker()

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', name='gender'), nullable=True),
    sa.Column('birth_date', sa.DateTime(), nullable=True),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(length=16), nullable=True),
    sa.Column('nik', sqlmodel.sql.sqltypes.AutoString(length=16), nullable=True),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'USER', 'EO', name='role'), nullable=False),
    sa.Column('status', sa.Enum('BASIC', 'PREMIUM', name='userstatus'), nullable=False),
    sa.Column('provider_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('profile_picture', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email_verified_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('providers',
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('provider_name', sa.Enum('EMAIL', 'GOOGLE', 'FACEBOOK', 'TWITTER', name='providername'), nullable=False),
    sa.Column('external_provider_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('provider_id')
    )
    # ### end Alembic commands ###
    
    # ### generate seed data ###
    
    for _ in range(10):  # Generate 10 fake users
        user_id = fake.uuid4()
        full_name = fake.name()
        email = fake.email()
        gender = fake.random_element(elements=['MALE', 'FEMALE'])
        birth_date = fake.date_of_birth(minimum_age=18, maximum_age=80)
        phone_number = fake.phone_number().replace("-", "").replace("(", "").replace(")", "").replace(" ", "")[:16]
        nik = str(fake.random_number(digits=16)).zfill(16)
        address = fake.address()
        role = fake.random_element(elements=['USER', 'ADMIN', 'EO'])
        status = fake.random_element(elements=['BASIC', 'PREMIUM'])
        provider_id = fake.uuid4()
        password_hash = generate_password_hash('password123')
        profile_picture = fake.image_url()
        email_verified_at = fake.date_this_decade()
        created_at = updated_at = datetime.now(timezone.utc)

        # Insert generated fake user data into the `users` table
        op.execute(f"""
            INSERT INTO users (
                user_id, full_name, email, gender, birth_date, phone_number, nik, address, 
                role, status, provider_id, password_hash, profile_picture, email_verified_at, 
                created_at, updated_at
            ) VALUES (
                '{user_id}', '{full_name}', '{email}', '{gender}', '{birth_date}', '{phone_number}', 
                '{nik}', '{address}', '{role}', '{status}', '{provider_id}', '{password_hash}', 
                '{profile_picture}', '{email_verified_at}', '{created_at}', '{updated_at}'
            );
        """)

        # Insert generated fake provider data for each user into the `providers` table
        provider_name = fake.random_element(elements=['EMAIL'])
        external_provider_id = fake.uuid4()

        op.execute(f"""
            INSERT INTO providers (user_id, provider_name, external_provider_id) 
            VALUES ('{user_id}', '{provider_name}', '{external_provider_id}');
        """)
        


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('providers')
    op.drop_table('users')
    op.execute("DROP TYPE IF EXISTS gender")
    op.execute("DROP TYPE IF EXISTS userstatus")
    op.execute("DROP TYPE IF EXISTS providername")
    op.execute("DROP TYPE IF EXISTS role")
    # ### end Alembic commands ###
